/*
    This JS was generated by Google Gemini and altered to suit.
    It does a POST to the Flask route api/crud.
    The route makes a call to the class in src.aiFullCrudClass.PyMySQLCRUD.
    The class uses the form data from our "standard" form1 containing the
    id, opcode and table hidden inputs and cleans them out when doing
    an insert or uptate. 
    
    The caller provides the table name and opcode in the form.
    The opcode must be one of create, read, update or delete.
    
    This is included in the base flask template
    
*/ 
 const API_URL = 'http://localhost:5000/api/crud'; // Your Flask API endpoint
 var crudResponse;

        async function performCrud() {
            // Get the form element
            const form = document.getElementById('form  ');
            const formData = new FormData(form);

            // Convert FormData to a plain JavaScript object
            let formDataToSend = {};
            for (let [key, value] of formData.entries()) {
                formDataToSend[key] = value;
            }            

            // Log the assembled formDataToSend for debugging
            //console.log("Sending formData:", formDataToSend);

            try {
                const response = await fetch(API_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json', // We are sending JSON
                    },
                    body: JSON.stringify(formDataToSend) // Convert the plain object to a JSON string
                });

                const result = await response.json();

                crudResponse = JSON.stringify(result, null, 2); //For the caller's use.

            } catch (error) {
                msg = `Error: ${error.message}. Make sure your Python Flask server is running at ${API_URL}`;
                crudResponse = {"success":False, "message": msg}
                console.error('Fetch error:', error);
            }
        }
